{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Notifications.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","reportWebVitals.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SignedOutLinks","state","firebase","links","uid","ProjectSummary","project","title","authorFirstName","authorLastName","moment","createdAt","toDate","calendar","ProjectList","projects","map","id","Notifications","Dashboard","this","Component","compose","console","log","firestore","ordered","firestoreConnect","collection","limit","orderBy","ownProps","match","params","data","content","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","Credentials","signInWithEmailAndPassword","catch","err","payload","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","res","doc","user","set","CreateProject","createProject","history","push","authorId","add","Date","App","path","component","exact","ProjectDetails","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","authReducer","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","analytics","store","createStore","composeWithDevTools","applyMiddleware","thunk","withExtraArgument","reactReduxFirebase","fbConfig","userProfile","useFirestoreForProfile","attachAuthIsReady","reduxFirestore","firebaseAuthIsReady","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3d33afd.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signOut } from '../../store/actions/authActions';\n\nconst SignedInLinks = props => {\n  return (\n    <div>\n      <ul className=\"right\">\n        <li>\n          <NavLink to=\"/react-redux-firebase/create\">New Project</NavLink>\n        </li>\n        <li>\n          <a onClick={props.signOut}>Log Out</a>\n        </li>\n        <li>\n          <NavLink\n            to=\"/react-redux-firebase\"\n            className=\"btn btn-floating pink lighten-1\"\n          >\n            {props.profile.initials}\n          </NavLink>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    signOut: () => dispatch(signOut())\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SignedInLinks);\n","export const signIn = Credentials => {\r\n  return (dispatch, getState, { getFirebase }) => {\r\n    const firebase = getFirebase(); // Initiate firebase\r\n\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(Credentials.email, Credentials.password)\r\n      .then(() => {\r\n        dispatch({ type: 'LOGIN_SUCCESS' });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: 'LOGIN_ERROR', payload: err });\r\n      });\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return (dispatch, getState, { getFirebase }) => {\r\n    const firebase = getFirebase();\r\n\r\n    firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(() => dispatch({ type: 'SIGNOUT_SUCCESS' }));\r\n  };\r\n};\r\n\r\nexport const signUp = newUser => {\r\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n    const firebase = getFirebase();\r\n    const firestore = getFirestore();\r\n\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(newUser.email, newUser.password)\r\n      .then(res => {\r\n        return firestore\r\n          .collection('users')\r\n          .doc(res.user.uid)\r\n          .set({\r\n            firstName: newUser.firstName,\r\n            lastName: newUser.lastName,\r\n            initials: newUser.firstName[0] + newUser.lastName[0]\r\n          });\r\n      })\r\n      .then(() => dispatch({ type: 'SIGNUP_SUCCESS' }))\r\n      .catch(err => dispatch({ type: 'SIGNUP_ERROR', payload: err }));\r\n  };\r\n};\r\n\r\n// getFirebase -> interact with firebase auth and generate new user\r\n// getFirestore -> communicate with the firestore database\r\n\r\n// if the collection is not present in the firebase, then firebase will automatically create it.\r\n// res is the response returned\r\n// add() automatically adds a id to the document. So, we are using doc() to assign a custom id to the document.\r\n// after doc() we are using set() to set the data in the document.\r\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst SignedOutLinks = () => {\n  return (\n    <div>\n      <ul className=\"right\">\n        <li>\n          <NavLink to=\"/react-redux-firebase/signup\">Signup</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/react-redux-firebase/signin\">Login</NavLink>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default SignedOutLinks;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignedInLinks from './SignedInLinks';\nimport SignedOutLinks from './SignedOutLinks';\nimport { connect } from 'react-redux';\n\nconst Navbar = props => {\n  const { auth, profile } = props;\n  // console.log(auth);\n  const links = auth.uid ? (\n    <SignedInLinks profile={profile} />\n  ) : (\n    <SignedOutLinks />\n  );\n  return (\n    <nav className=\"nav-wrapper grey darken-3\">\n      <div className=\"container\">\n        <Link to=\"/react-redux-firebase\" className=\"brand-logo\">\n          MarioPlan\n        </Link>\n        {links}\n      </div>\n    </nav>\n  );\n};\n\nconst mapStateToProps = state => {\n  // console.log(state);\n  return {\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  };\n};\n\nexport default connect(mapStateToProps)(Navbar);\n\n/*\nUnlike how we did ib case of ProjectDetails, here we do not need to define which collection to connect with this component, so we do not need to use firebaseConnect and only need to connect the component with the redux state to be able to access the firebase property of the state object. \n*/\n","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nexport default function ProjectSummary({ project }) {\r\n  return (\r\n    <div className=\"card z-depth-0 project-summary\">\r\n      <div className=\"card-content grey-text text-darken-3\">\r\n        <span className=\"card-title \">{project.title}</span>\r\n        <p>\r\n          Posted by {project.authorFirstName} {project.authorLastName}\r\n        </p>\r\n        <p className=\"grey-text\">\r\n          {moment(project.createdAt.toDate()).calendar()}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ProjectSummary from './ProjectSummary';\nimport { Link } from 'react-router-dom';\n\nconst ProjectList = ({ projects }) => {\n  return (\n    <div className=\"project-list section\">\n      {projects &&\n        projects.map(project => {\n          return (\n            <Link\n              to={'/react-redux-firebase/project/' + project.id}\n              key={project.id}\n            >\n              <ProjectSummary project={project} />\n            </Link>\n          );\n        })}\n      {/*  */}\n    </div>\n  );\n};\n\nexport default ProjectList;\n","import React from 'react'\n\nconst Notifications = () => {\n  return (\n    <div>\n      <p>Notifications</p>\n    </div>\n  )\n}\n\nexport default Notifications\n","import React, { Component } from 'react';\nimport ProjectList from '../projects/ProjectList';\nimport Notifications from './Notifications';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom';\n\nclass Dashboard extends Component {\n  render() {\n    // console.log(this.props);\n    const { projects, auth } = this.props;\n    if (!auth.uid) {\n      // Logged in users will have uid\n      // If user is not logged in, then redirect them to the signin page\n      // Hiding some pages from certain users is called Route Guarding\n      return <Redirect to=\"/react-redux-firebase/signin\" />;\n    }\n    return (\n      <div className=\"dashboard container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n            <ProjectList projects={projects} />\n          </div>\n          <div className=\"col s12 m5 offset-m1\">\n            <Notifications />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    // projects: state.project.projects\n    // state is the store that was passed from the index.js component.\n    // state.project refers to the project property in the reducer object stored in store.\n    // state.project.projects refers to the projects property where the project property of the reducer that was passed to store refers to.\n  };\n};\n*/\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    projects: state.firestore.ordered.projects,\n    // state is the data returned from the firebase and ordered.projects gives an ordered list of projects collection.\n    // Because that collection is connected to this component using the firestoreConnect HOC.\n    auth: state.firebase.auth\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'projects', limit: 10, orderBy: ['createdAt', 'desc'] }\n  ])\n)(Dashboard);\n// Connect is a HOC. react-redux is the glue library that glues react and redux.\n// We will connect the Dashboard component with the redux store.\n\n/* \nWe are passing the store from the index.js component to all of it's descendants. But we cannot directly access the store.\nWe first need to use the mapStateToProps function, which will take a parameter state and return an object having the data that we need from the store. state parameter has all the data of the store.\nThen we need to pass it to the HOC connect and pass the current component to connect. This will make sure that the object that mapStateToProps function returns, is passed to Dashboard as a props. And from there we can use the desired data from the store.\n*/\n\n/*\nfirestoreConnect is a HOC that specifies which collection to connect with this component.\nFrom now on, whenever this component is active on the page, it will be synced up with the projects collection in firebase.\n*/\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { compose } from 'redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nconst ProjectDetails = props => {\r\n  // const id = props.match.params.id; // props.match is the props that React Router passed.\r\n  // params.id is the route parameter that we are using to identify the specifi route.\r\n  // If we put mario in place of :id in the url, then we will get the value mario in props.match.params.id\r\n  // If we put 3 in place of :id in the url, then we will get the value 3 in props.match.params.id\r\n\r\n  const { project, auth } = props;\r\n  if (!auth.uid) {\r\n    return <Redirect to=\"/react-redux-firebase/signin\" />;\r\n  }\r\n  console.log(props);\r\n  if (project) {\r\n    return (\r\n      <div className=\"container section project-details\">\r\n        <div className=\"card z-depth-0\">\r\n          <div className=\"card-content\">\r\n            <span className=\"card-title\">{project.title}</span>\r\n            <p>{project.content}</p>\r\n          </div>\r\n          <div className=\"card-action grey lighten-4 grey-text\">\r\n            <div>\r\n              Posted by {project.authorFirstName} {project.authorLastName}\r\n            </div>\r\n            <div>{moment(project.createdAt.toDate()).calendar()}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"container center\">\r\n        <p>Loading project...</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // ownProps is the default props of the component before we attach anything to it.\r\n  const id = ownProps.match.params.id;\r\n  const projects = state.firestore.data.projects;\r\n  // This firestore corresponds to the firestore property of the state object whose value is firestoreReducer\r\n  const project = projects ? projects[id] : null;\r\n  return {\r\n    project: project,\r\n    auth: state.firebase.auth\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps),\r\n  firestoreConnect([{ collection: 'projects' }])\r\n)(ProjectDetails);\r\n\r\n/*\r\nHere we needed to define which collection to connect with this component, so we are using firestoreConnect HOC along with the connect HOC that connects the component with redux state.\r\n*/\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { signIn } from '../../store/actions/authActions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass SignIn extends Component {\r\n  state = {\r\n    email: '',\r\n    password: ''\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    // console.log(this.state);\r\n    this.props.signIn(this.state);\r\n  };\r\n  render() {\r\n    const { authError, auth } = this.props;\r\n    if (auth.uid) {\r\n      return <Redirect to=\"/react-redux-firebase\" />;\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <form onSubmit={this.handleSubmit} className=\"white\">\r\n          <h5 className=\"grey-text text-darken-3\">Sign In</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input type=\"email\" id=\"email\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" id=\"password\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\r\n            <div className=\"red-text center\">\r\n              {authError ? <p>{authError}</p> : null}\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    authError: state.auth.authError,\r\n    auth: state.firebase.auth\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    signIn: creds => dispatch(signIn(creds))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\r\n\r\n/*\r\nadmin@app.com\r\ntest123\r\n*/\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { signUp } from '../../store/actions/authActions';\r\n\r\nclass SignUp extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n    firstName: '',\r\n    lastName: ''\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    // console.log(this.state);\r\n    this.props.signUp(this.state);\r\n  };\r\n\r\n  render() {\r\n    const { auth, authError } = this.props;\r\n    if (auth.uid) {\r\n      return <Redirect to=\"/react-redux-firebase\" />;\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <form onSubmit={this.handleSubmit} className=\"white\">\r\n          <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input type=\"email\" id=\"email\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" id=\"password\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"firstName\">First Name</label>\r\n            <input type=\"text\" id=\"firstName\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"lastName\">Last Name</label>\r\n            <input type=\"text\" id=\"lastName\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\r\n            <div className=\"red-text center\">\r\n              {authError ? <p>{authError}</p> : null}\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    auth: state.firebase.auth,\r\n    authError: state.auth.authError\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    signUp: newUser => dispatch(signUp(newUser))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\r\n\r\n// After signup, we automatically get logged in.\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createProject } from '../../store/actions/projectActions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass CreateProject extends Component {\r\n  state = {\r\n    title: '',\r\n    content: ''\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    // console.log(this.state);\r\n    this.props.createProject(this.state);\r\n    this.props.history.push('/react-redux-firebase'); // This will redirect the page to the specifid directory\r\n    // Whenever we use router, it sends some propertis as props to the components. history is one of them.\r\n  };\r\n\r\n  render() {\r\n    const { auth } = this.props;\r\n    if (!auth.uid) {\r\n      return <Redirect to=\"/react-redux-firebase/signin\" />;\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <form onSubmit={this.handleSubmit} className=\"white\">\r\n          <h5 className=\"grey-text text-darken-3\">Create Project</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"title\">Title</label>\r\n            <input type=\"text\" id=\"title\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"content\">Project Content</label>\r\n            <textarea\r\n              id=\"content\"\r\n              className=\"materialize-textarea\"\r\n              onChange={this.handleChange}\r\n            ></textarea>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn pink lighten-1 z-depth-0\">Create</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {\r\n    auth: state.firebase.auth\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    createProject: project => dispatch(createProject(project))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject);\r\n","export const createProject = project => {\r\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n    // make async call to database\r\n    const firestore = getFirestore(); // Reference to the firestore database\r\n    const profile = getState().firebase.profile;\r\n    const authorId = getState().firebase.auth.uid;\r\n    firestore\r\n      .collection('projects')\r\n      .add({\r\n        ...project,\r\n        authorFirstName: profile.firstName,\r\n        authorLastName: profile.lastName,\r\n        authorId: authorId,\r\n        createdAt: new Date()\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: 'CREATE_PROJECT', payload: project });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: 'CREATE_PROJECT_ERROR', payload: err });\r\n      });\r\n  };\r\n};\r\n\r\n/*\r\nThunk allows actrions to return a function instead of an object.\r\nthe function takes two parameters, dispatch and getState.\r\nThe dispatch parameter is the one that dispatches the action to the reducer.\r\nWhen we call a action using the dispatch, we are returning a function and we are retaining that dispatch.\r\nWe are not returning the action anymore, just the function.\r\nwe are getting the parameter { getFirebase, getFirestore } because we added extra arguments with thunk.\r\n\r\nSTEPS:\r\n1. We call the dispatch with an action\r\n2. We hold the dipatch and return a function having the dispatch.\r\n3. We do something (In this case, async call to database)\r\n4. Then carry on with the dispatch of the function that was returned\r\n5. The action is dispatched to the reducer\r\n6. store is updated\r\n*/\r\n\r\n/*\r\nfirestore.collection('projects').add({}) adds the passed object, to the collection specified, in the firebase.\r\nIt is asynchronous.\r\n*/\r\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport ProjectDetails from './components/projects/ProjectDetails';\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport CreateProject from './components/projects/CreateProject';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route\n              path=\"/react-redux-firebase\"\n              component={Dashboard}\n              exact\n            />\n            {/* We need to put exact because /project/:id also have / in its url. So, unless and until we put exact, the router will\n            keep routing to Dashboard. Router routes to the shortest matching url if exact is not given (IMO) */}\n            <Route\n              path=\"/react-redux-firebase/project/:id\"\n              component={ProjectDetails}\n              exact\n            />\n            {/*\\:id is the route parameter*/}\n            {/*When we attach a component to React Router, the react router attaches some default props to the component.*/}\n            <Route path=\"/react-redux-firebase/signin\" component={SignIn} />\n            <Route path=\"/react-redux-firebase/signup\" component={SignUp} />\n            <Route\n              path=\"/react-redux-firebase/create\"\n              component={CreateProject}\n            />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState = {\r\n  authError: null\r\n};\r\n\r\nconst authReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN_ERROR':\r\n      return {\r\n        ...state,\r\n        authError: 'Login failed'\r\n      };\r\n    case 'LOGIN_SUCCESS':\r\n      console.log('Login Success');\r\n      return {\r\n        ...state,\r\n        authError: null\r\n      };\r\n    case 'SIGNOUT_SUCCESS':\r\n      console.log('Sign out success');\r\n      return state;\r\n    case 'SIGNUP_SUCCESS':\r\n      console.log('sign up success');\r\n      return {\r\n        ...state,\r\n        authError: null\r\n      };\r\n    case 'SIGNUP_ERROR':\r\n      console.log('sign up error');\r\n      return {\r\n        ...state,\r\n        authError: action.payload.message\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n","const initState = {\r\n  projects: [\r\n    {\r\n      id: 1,\r\n      title: 'help me find peach',\r\n      content: 'blah blah blah'\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'collect all the stars',\r\n      content: 'blah blah blah'\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'egg hunt with dk',\r\n      content: 'blah blah blah'\r\n    }\r\n  ]\r\n};\r\n\r\nconst projectReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'CREATE_PROJECT':\r\n      console.log('created project: ', action.payload);\r\n      return state;\r\n    case 'CREATE_PROJECT_ERROR':\r\n      console.log('created project error: ', action.payload);\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default projectReducer;\r\n","import authReducer from './authReducer';\r\nimport projectReducer from './projectReducer';\r\nimport { combineReducers } from 'redux';\r\nimport { firestoreReducer } from 'redux-firestore';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  project: projectReducer,\r\n  firestore: firestoreReducer,\r\n  firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer;\r\n\r\n/*\r\nIn the background, firestoreReducer will sync the state object(store) to our database in the firebase.\r\nIt will retrieve the data for us and that data will depend on which component is currently active and what data that component needs, that data will be synced in the state by this reducer. \r\nWe need to tell firestoreReducer what data to be retrieved. The retrieved data will be placed in the firestore property on the state object.\r\nNow we can access the sync data from the firestore property of the state object.\r\n*/\r\n\r\n/*\r\nfirebaseReducer will sync firebase information. including authentication.\r\nNow, this firebaseReducer will sync the firebase auth with our redux and store it in the firebase property of the state object.\r\n*/\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/storage';\r\nimport 'firebase/analytics';\r\n\r\nconst apiKey = process.env.REACT_APP_FIREBASE_API_KEY;\r\n\r\nvar firebaseConfig = {\r\n  apiKey: apiKey,\r\n  authDomain: 'react-redux-firebase-tut-76d67.firebaseapp.com',\r\n  projectId: 'react-redux-firebase-tut-76d67',\r\n  storageBucket: 'react-redux-firebase-tut-76d67.appspot.com',\r\n  messagingSenderId: '856776411875',\r\n  appId: '1:856776411875:web:ed0d31d2884f875f5e13d6',\r\n  measurementId: 'G-NW4EYY2R1G'\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// firebase.firestore.settings({ timestampsinsnapshots: true });\r\nfirebase.analytics();\r\n\r\nexport default firebase;\r\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    compose(\n      compose(\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n        reactReduxFirebase(fbConfig, {\n          userProfile: 'users', // This specifies, which collection in the firestore will be synced with the profile property.\n          useFirestoreForProfile: true, // This will let the specified firestore collction sync with the profile property of the state object.\n          attachAuthIsReady: true // This will make sure that firebase checks for authentication first\n        }), // redux binding for firebase\n        reduxFirestore(fbConfig) // redux bindings for firestore\n      )\n    )\n  )\n);\n\n/*\n// applyMiddleware is a store enhancer. We can have multiple store enhancer.\n// thunk is a middleware that lies between dispatch and action.\n// We pass thunk to applyMiddleware to add extra functionality.\n// That functionality is now being that we can return a function inside our action creators which can then interact with the database.\n// thunk middleware is now enhancing our store with extra functionality\n// thunk holds the dispatch while the data is stored to the database, then it goes to action.\n// So, thunk makes the redux asynchronous.\n// withExtraArgument() allows us to add extra arguments as objects to thunk.\n\n// reduxFirestore() is the store enhancers that we use to link getFirestore and getFirebase with the config file where the Firebase configuration is situated. In this way, we link redux with our firebase project and  getFirestore and getFirebase know, which firebase project to link to.\n*/\n\n// Render this to the DOM, after firebase authenticates if we are logged in or not.\nstore.firebaseAuthIsReady.then(() => {\n  ReactDOM.render(\n    <Provider store={store}>\n      {/* The value passed to the store attribute will be passed to all the child elements and also to all the descendent elements */}\n      <App />\n    </Provider>,\n    document.getElementById('root')\n  );\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}